<?xml version="1.0" encoding="utf-8"?>

<!--
  build.xml
  Copyright (C) 2021 Takayuki Sato All Rights Reserved.
-->
<project name="reasonederror" basedir="." default="all"
 xmlns:ivy="antlib:org.apache.ivy.ant"
 xmlns:jacoco="antlib:org.jacoco.ant">

  <property file="build.properties"/>

  <path id="project.class.path">
    <fileset dir="${dir.lib}">
      <include name="**/*.jar"/>
    </fileset>
    <pathelement path="${java.class.path}"/>
    <pathelement location="${dir.bin}"/>
  </path>

  <path id="project.test.class.path">
    <path refid="project.class.path"/>
    <fileset dir="${dir.test.lib}">
      <include name="**/*.jar"/>
    </fileset>
  </path>


  <target name="all"
   description="Runs setup and build tasks">
    <antcall target="setup"/>
    <antcall target="build"/>
  </target>


  <target name="ci">
    <antcall target="test:cover"/>
  </target>


  <target name="setup"
   description="Creates directories and resolves dependencies">
    <ant target="setup:deps:clean"/>
    <ant target="setup:deps"/>
    <ant target="setup:deps-test"/>
    <ant target="setup:dirs"/>
  </target>

  <target name="setup:dirs">
    <mkdir dir="${dir.bin}"/>
    <mkdir dir="${dir.src}"/>
    <mkdir dir="${dir.res}"/>
    <mkdir dir="${dir.lib}"/>
    <mkdir dir="${dir.module}"/>
    <mkdir dir="${dir.jar}"/>
    <mkdir dir="${dir.test.bin}"/>
    <mkdir dir="${dir.test.res}"/>
    <mkdir dir="${dir.test.lib}"/>
    <mkdir dir="${dir.doc.api}"/>
    <mkdir dir="${dir.doc.test}"/>
    <mkdir dir="${dir.doc.cover}"/>
  </target>

  <target name="setup:deps:clean">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dir.lib}"/>
      <fileset dir="${dir.test.lib}"/>
    </delete>
  </target>

  <target name="setup:deps">
    <ivy:configure file="ivysettings.xml"/>
    <ivy:retrieve file="ivy.xml" sync="true"
     pattern="${dir.lib}/[artifact]-[revision](-[type]).[ext]"/>
  </target>

  <target name="setup:deps-test">
    <ivy:configure file="ivysettings.xml"/>
    <ivy:retrieve file="ivy.test.xml" sync="true"
     pattern="${dir.test.lib}/[artifact]-[revision](-[type]).[ext]"/>
  </target>


  <target name="clear-ivycache"
   description="Clears downloaded libraries in local Ivy cache">
    <ivy:cleancache/>
  </target>


  <target name="check-deps-update"
   description="Checks whether dependencies are outdated">
    <ivy:checkdepsupdate/>
  </target>


  <target name="build"
   description="Runs clean, compile, test and Jar tasks">
    <antcall target="clean"/>
    <antcall target="compile"/>
    <antcall target="test"/>
    <antcall target="javadoc"/>
    <antcall target="jar"/>
  </target>


  <target name="clean"
   description="Remove all generated files">
    <delete includeEmptyDirs="true" failonerror="false">
      <fileset dir="${dir.bin}"/>
      <fileset dir="${dir.jar}"/>
      <fileset dir="${dir.test.bin}"/>
      <fileset dir="${dir.doc.api}"/>
      <fileset dir="${dir.doc.test}"/>
      <fileset dir="${dir.doc.cover}"/>
    </delete>
    <ant target="setup:dirs"/>
  </target>


  <target name="compile"
   description="Compiles java files and converts property files">
    <javac destdir="${dir.bin}" srcdir="${dir.src}"
     classpathref="project.class.path"
     optimize="true" debug="true" deprecation="yes"
     includeantruntime="false">
      <include name="sttk/**/*.java"/>
      <exclude name="**/*Test.java"/>
      <compilerarg value="-Xlint"/>
    </javac>
    <javac destdir="${dir.bin}" srcdir="${dir.module}"
     optimize="true" debug="true" deprecation="yes"
     includeantruntime="false">
      <compilerarg value="-Xlint"/>
    </javac>
    <native2ascii src="${dir.res}" dest="${dir.bin}"
     includes="sttk/**/*.properties"/>
  </target>


  <target name="test"
   description="Tests Java classes with JUnit and Jacoco">
    <antcall target="test:compile"/>
    <antcall target="test:run" />
    <antcall target="test:cover"/>
  </target>

  <target name="test:compile" depends="compile">
    <javac destdir="${dir.test.bin}" srcdir="${dir.src}"
     classpathref="project.test.class.path"
     optimize="false" debug="true" deprecation="yes"
     includeantruntime="false">
      <include name="**/*Test.java"/>
      <compilerarg value="-Xlint"/>
    </javac>
  </target>

  <target name="test:run" depends="test:compile">
    <junit haltonfailure="false" printsummary="yes" fork="true">
      <classpath>
        <path refid="project.test.class.path"/>
        <pathelement path="${dir.test.bin}"/>
      </classpath>
      <assertions/>
      <formatter type="plain"/>
      <batchtest todir="${dir.doc.test}">
        <fileset dir="${dir.test.bin}">
          <include name="**/*Test.class"/>
        </fileset>
      </batchtest>
    </junit>
    <concat>
     <fileset dir="${dir.doc.test}" includes="TEST-*.txt"/>
    </concat>
  </target>

  <target name="test:cover" depends="test:compile">
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml"
     classpathref="project.test.class.path"/>
    <jacoco:coverage destfile="${dir.doc.cover}/jacoco.exec">
      <junit haltonfailure="false" printsummary="yes" fork="true">
        <classpath>
          <path refid="project.test.class.path"/>
          <pathelement path="${dir.test.bin}"/>
        </classpath>
        <assertions/>
        <batchtest todir="${dir.doc.test}">
          <fileset dir="${dir.test.bin}">
            <include name="**/*Test.class"/>
          </fileset>
        </batchtest>
      </junit>
    </jacoco:coverage>
    <jacoco:report>
      <executiondata>
        <file file="${dir.doc.cover}/jacoco.exec"/>
      </executiondata>
      <structure name="sttk/${ant.project.name}">
      <classfiles>
        <fileset dir="${dir.bin}"/>
      </classfiles>
      <sourcefiles encoding="utf-8">
        <fileset dir="${dir.src}"/>
      </sourcefiles>
      </structure>
      <html destdir="${dir.doc.cover}"/>
    </jacoco:report>
  </target>


  <target name="javadoc" depends="compile"
   description="Makes javadoc for Java classes">
    <javadoc destdir="${dir.doc.api}" encoding="utf-8"
     windowtitle="${ant.project.name} ver${version} - API document"
     private="false" packagenames="*" author="true" version="true" use="true">
      <fileset dir="${dir.src}">
        <include name="sttk/${ant.project.name}/*.java"/>
        <exclude name="**/*Test.java"/>
      </fileset>
      <classpath refid="project.class.path"/>
      <bottom>&lt;i&gt;${copyright}&lt;/i&gt;</bottom>
    </javadoc>
  </target>


  <target name="jar" depends="compile"
   description="Creates Jar files of this project">
    <jar destfile="jar/${ant.project.name}-${version}.jar"
     basedir="bin"/>
    <jar destfile="jar/${ant.project.name}-${version}-sources.jar">
      <fileset dir="src">
        <include name="**/*.java"/>
        <exclude name="**/*Test.java"/>
      </fileset>
      <fileset dir="res"/>
    </jar>
    <jar destfile="jar/${ant.project.name}-${version}-javadoc.jar"
     basedir="${dir.doc.api}"/>
  </target>


  <target name="publish" depends="publish:gen-pom"
   description="Publishes Jar files to a Maven repository">
    <ivy:resolve file="ivy.publish.xml"/>
    <ivy:publish resolver="local"
     forcedeliver="true" overwrite="true" publishivy="false" update="true">
      <artifacts pattern="${dir.jar}/[artifact]-[revision](-[classifier]).[ext]"/>
    </ivy:publish>
  </target>

  <target name="publish:gen-pom" depends="jar">
    <ivy:makepom ivyfile="ivy.publish.xml"
     pomfile="${dir.jar}/${ant.project.name}-${version}.pom">
      <mapping conf="default" scope="compile"/>
    </ivy:makepom>
  </target>


  <target name="serialver"
   description="Prints a serial version UID for a specified class">
    <property name="_classpath" refid="project.class.path"/>
    <exec dir="." executable="serialver">
      <arg line="${class}"/>
      <env key="CLASSPATH" path="${_classpath}"/>
    </exec>
  </target>


  <target name="api"
   description="Prints API with javap">
    <property name="_classpath" refid="project.test.class.path"/>
    <exec dir="." executable="javap">
      <arg line="${class}"/>
      <env key="CLASSPATH" path="${_classpath}"/>
    </exec>
  </target>
</project>

